# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного
# задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента
# необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться.

class Numbers(Exception):
    def __init__(self, notice):
        self.notice = notice


user_data = ''
right_list = []
while user_data != 'stop':
    user_data = input('Введите число. Для выхода, введите "stop": ')
    if user_data == 'stop':
        print('Вы завершили программу.')
        print(f'Ваш результат: {right_list}')
    else:
        try:
            for el in user_data:
                if (len(user_data) == 1 and (user_data == '.' or user_data == '-')) or user_data[-1] == '.' \
                        or user_data[-1] == '-' or user_data[0] == '.' or '-.1234567890'.find(el) == -1:
                    raise Numbers('Вы ввели не число. Попробуйте ещё раз.')
        except Numbers as err:
            print(err)
        else:
            right_list.append(user_data)
